@page "/produtos"
@inject IProdutoService produtoService
@using System.Linq;

<div class="produtos-container">
    @if (Produtos == null)
    {
        <div class="loading-area">
            <ExibirSpinner />
        </div>
    }
    else
    {
        <h2 class="produtos-titulo">Produtos</h2>

        @if (Produtos.Any())
        {
            var produtosPorCategoria = Produtos
            .OrderBy(o => o.CategoriaId)
            .GroupBy(g => new { g.CategoriaId, g.CategoriaNome })
            .ToList();

            @foreach (var prodGrupo in produtosPorCategoria)
            {
                <section class="categoria-section">
                    <header class="categoria-header">
                        <h3 class="categoria-nome">@prodGrupo.FirstOrDefault()?.CategoriaNome</h3>
                    </header>

                    <div class="produtos-grid">
                        <ExibirProdutos Produtos="@prodGrupo"></ExibirProdutos>
                    </div>
                </section>
            }
        }
        else
        {
            <div class="nenhum-produto">
                <p>Nenhum produto disponível no momento.</p>
            </div>
        }
    }
</div>

@code {
    public IEnumerable<ProdutoDto>? Produtos { get; set; }

    [Inject] public IGerenciaProdutosLocalStorageService? GerenciaProdutosLocalStorageService { get; set; }
    [Inject] public IGerenciaCarrinhoItensLocalStorageService? GerenciaCarrinhoItensLocalStorageService { get; set; }
    [Inject] public ICarrinhoCompraService? CarrinhoCompraService { get; set; }

    public string? MensagemErro { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LimpaLocalStorage();

            Produtos = await GerenciaProdutosLocalStorageService!.GetCollection();

            var carrinhoCompraItens = await GerenciaCarrinhoItensLocalStorageService!
                                           .GetCollection();

            var totalQuantidade = carrinhoCompraItens.Sum(i => i.Quantidade);

            CarrinhoCompraService!.RaiseEventOnCarrinhoCompraChanged(totalQuantidade);
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    private async Task LimpaLocalStorage()
    {
        await GerenciaProdutosLocalStorageService!.RemoveCollection();
        await GerenciaCarrinhoItensLocalStorageService!.RemoveCollection();
    }
}
